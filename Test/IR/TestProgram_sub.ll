; ModuleID = 'IR/TestProgram.ll'
source_filename = "TestProgram.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@input = dso_local global i8* null, align 8
@enc = dso_local global <{ [22 x i8], [78 x i8] }> <{ [22 x i8] c"\86\8A}\87\93\8BM\81\80\8AC\7FII\86q\7FbSi(\9D", [78 x i8] zeroinitializer }>, align 16
@.str = private unnamed_addr constant [26 x i8] c"Welcome to LLVM world...\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Input your flag as an argument.\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"Your flag is: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Congratulations~\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Sorry try again.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable mustprogress
define dso_local void @_Z7encryptPhPc(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = call i64 @strlen(i8* %7) #5
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %10

10:                                               ; preds = %464, %2
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %5, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %483

14:                                               ; preds = %10
  %15 = load i8*, i8** %4, align 8
  %16 = load i32, i32* %6, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = load i32, i32* %6, align 4
  %22 = sub i32 0, 1052235578
  %23 = sub i32 32, %22
  %24 = sub i32 %23, 1927080841
  %25 = sub i32 %24, 1787494655
  %26 = add i32 %25, 1927080841
  %27 = sub i32 %26, 1151805775
  %28 = sub i32 %27, 1052235578
  %29 = add i32 %28, 1151805775
  %30 = sub i32 %29, 1839183415
  %31 = add i32 %30, 482752503
  %32 = add i32 %31, 1839183415
  %33 = sub i32 0, %21
  %34 = add i32 %32, %33
  %35 = sub i32 0, 482752503
  %36 = add i32 %34, %35
  %37 = sub i32 0, %36
  %38 = add i32 0, %37
  %39 = sub i32 0, 1787494655
  %40 = add i32 0, %39
  %41 = sub i32 %38, 718033758
  %42 = add i32 %41, %40
  %43 = add i32 %42, 718033758
  %44 = sub i32 0, 438034109
  %45 = sub i32 %44, %43
  %46 = add i32 %45, 438034109
  %47 = sub i32 0, 1858967307
  %48 = sub i32 %47, 269276598
  %49 = add i32 %48, 1858967307
  %50 = sub i32 0, %49
  %51 = sub i32 %20, %50
  %52 = sub i32 0, 289525689
  %53 = sub i32 %52, %46
  %54 = add i32 %53, 289525689
  %55 = sub i32 %51, 979437934
  %56 = sub i32 %55, %54
  %57 = add i32 %56, 979437934
  %58 = sub i32 0, %57
  %59 = add i32 0, %58
  %60 = sub i32 0, 269276598
  %61 = add i32 0, %60
  %62 = sub i32 0, %61
  %63 = sub i32 %59, %62
  %64 = sub i32 0, 1103050112
  %65 = sub i32 %64, %63
  %66 = add i32 %65, 1103050112
  %67 = load i32, i32* %6, align 4
  %68 = xor i32 %66, -1
  %69 = and i32 %68, -1
  %70 = xor i32 -1, -1
  %71 = and i32 %66, %70
  %72 = or i32 %69, %71
  %73 = xor i32 %72, -1
  %74 = xor i32 -1, -1
  %75 = or i32 %73, %74
  %76 = xor i32 %75, -1
  %77 = xor i32 1387088724, -1
  %78 = or i32 1387088724, %77
  %79 = and i32 %76, %78
  %80 = xor i32 -1, -1
  %81 = and i32 %80, 2001690935
  %82 = xor i32 2001690935, -1
  %83 = and i32 -1, %82
  %84 = or i32 %81, %83
  %85 = xor i32 -1, -1
  %86 = and i32 %85, 2001690935
  %87 = xor i32 2001690935, -1
  %88 = and i32 -1, %87
  %89 = or i32 %86, %88
  %90 = xor i32 %84, %89
  %91 = xor i32 %66, -1
  %92 = xor i32 %90, -1
  %93 = or i32 %91, %92
  %94 = xor i32 %93, -1
  %95 = xor i32 1174451152, -1
  %96 = or i32 1174451152, %95
  %97 = and i32 %94, %96
  %98 = and i32 %79, %97
  %99 = xor i32 %79, %97
  %100 = or i32 %98, %99
  %101 = xor i32 1615933409, -1
  %102 = and i32 %101, 573765540
  %103 = xor i32 573765540, -1
  %104 = and i32 1615933409, %103
  %105 = or i32 %102, %104
  %106 = xor i32 -1, -1
  %107 = and i32 %106, 573765540
  %108 = xor i32 573765540, -1
  %109 = and i32 -1, %108
  %110 = or i32 %107, %109
  %111 = xor i32 %105, %110
  %112 = xor i32 %100, -1
  %113 = and i32 %112, 2071259606
  %114 = xor i32 2071259606, -1
  %115 = and i32 %100, %114
  %116 = or i32 %113, %115
  %117 = xor i32 %111, -1
  %118 = and i32 %117, 2071259606
  %119 = xor i32 2071259606, -1
  %120 = and i32 %111, %119
  %121 = or i32 %118, %120
  %122 = xor i32 %116, %121
  %123 = xor i32 %100, -1
  %124 = xor i32 %122, %123
  %125 = and i32 %124, %122
  %126 = xor i32 1615933409, -1
  %127 = and i32 %126, -1
  %128 = xor i32 -1, -1
  %129 = and i32 1615933409, %128
  %130 = or i32 %127, %129
  %131 = xor i32 -1, -1
  %132 = xor i32 %130, %131
  %133 = and i32 %132, %130
  %134 = xor i32 -1, -1
  %135 = and i32 %134, 1913813378
  %136 = xor i32 1913813378, -1
  %137 = and i32 -1, %136
  %138 = or i32 %135, %137
  %139 = xor i32 -1, -1
  %140 = and i32 %139, 1913813378
  %141 = xor i32 1913813378, -1
  %142 = and i32 -1, %141
  %143 = or i32 %140, %142
  %144 = xor i32 %138, %143
  %145 = xor i32 1615933409, -1
  %146 = xor i32 %144, -1
  %147 = or i32 %145, %146
  %148 = xor i32 %147, -1
  %149 = xor i32 400424894, -1
  %150 = or i32 400424894, %149
  %151 = and i32 %148, %150
  %152 = and i32 %133, %151
  %153 = xor i32 %133, %151
  %154 = or i32 %152, %153
  %155 = xor i32 %154, -1
  %156 = and i32 %155, 1640230671
  %157 = xor i32 1640230671, -1
  %158 = and i32 %154, %157
  %159 = or i32 %156, %158
  %160 = xor i32 -1, -1
  %161 = and i32 %160, 1640230671
  %162 = xor i32 1640230671, -1
  %163 = and i32 -1, %162
  %164 = or i32 %161, %163
  %165 = xor i32 %159, %164
  %166 = xor i32 %66, -1
  %167 = and i32 %166, %165
  %168 = xor i32 %165, -1
  %169 = and i32 %66, %168
  %170 = or i32 %167, %169
  %171 = xor i32 %66, -1
  %172 = xor i32 %170, %171
  %173 = and i32 %172, %170
  %174 = xor i32 %125, -1
  %175 = and i32 %174, 1250239428
  %176 = xor i32 1250239428, -1
  %177 = and i32 %125, %176
  %178 = or i32 %175, %177
  %179 = xor i32 -1, -1
  %180 = and i32 %179, 1250239428
  %181 = xor i32 1250239428, -1
  %182 = and i32 -1, %181
  %183 = or i32 %180, %182
  %184 = xor i32 %178, %183
  %185 = xor i32 %173, -1
  %186 = and i32 %185, 1780148439
  %187 = xor i32 1780148439, -1
  %188 = and i32 %173, %187
  %189 = or i32 %186, %188
  %190 = xor i32 -1, -1
  %191 = and i32 %190, 1780148439
  %192 = xor i32 1780148439, -1
  %193 = and i32 -1, %192
  %194 = or i32 %191, %193
  %195 = xor i32 %189, %194
  %196 = xor i32 %195, -1
  %197 = xor i32 %184, %196
  %198 = and i32 %197, %184
  %199 = xor i32 %198, -1
  %200 = and i32 %199, -1
  %201 = xor i32 -1, -1
  %202 = and i32 %198, %201
  %203 = or i32 %200, %202
  %204 = xor i32 895167692, -1
  %205 = and i32 %204, 1281210012
  %206 = xor i32 1281210012, -1
  %207 = and i32 895167692, %206
  %208 = or i32 %205, %207
  %209 = xor i32 -1, -1
  %210 = and i32 %209, 1281210012
  %211 = xor i32 1281210012, -1
  %212 = and i32 -1, %211
  %213 = or i32 %210, %212
  %214 = xor i32 %208, %213
  %215 = xor i32 895167692, -1
  %216 = xor i32 %214, -1
  %217 = and i32 %215, %216
  %218 = xor i32 %217, -1
  %219 = xor i32 2122803628, -1
  %220 = or i32 2122803628, %219
  %221 = and i32 %218, %220
  %222 = xor i32 %203, -1
  %223 = xor i32 %221, -1
  %224 = or i32 %222, %223
  %225 = xor i32 %224, -1
  %226 = xor i32 1144283953, -1
  %227 = or i32 1144283953, %226
  %228 = and i32 %225, %227
  %229 = xor i32 %67, -1
  %230 = and i32 %229, 1703031476
  %231 = xor i32 1703031476, -1
  %232 = and i32 %67, %231
  %233 = or i32 %230, %232
  %234 = xor i32 -1, -1
  %235 = and i32 %234, 1703031476
  %236 = xor i32 1703031476, -1
  %237 = and i32 -1, %236
  %238 = or i32 %235, %237
  %239 = xor i32 %233, %238
  %240 = xor i32 %239, -1
  %241 = xor i32 1088928256, -1
  %242 = or i32 %240, %241
  %243 = xor i32 %242, -1
  %244 = xor i32 712966330, -1
  %245 = or i32 712966330, %244
  %246 = and i32 %243, %245
  %247 = xor i32 1088928256, -1
  %248 = and i32 %247, -1
  %249 = xor i32 -1, -1
  %250 = and i32 1088928256, %249
  %251 = or i32 %248, %250
  %252 = xor i32 %67, -1
  %253 = xor i32 %251, -1
  %254 = or i32 %252, %253
  %255 = xor i32 %254, -1
  %256 = xor i32 636742289, -1
  %257 = or i32 636742289, %256
  %258 = and i32 %255, %257
  %259 = and i32 %246, %258
  %260 = xor i32 %246, %258
  %261 = or i32 %259, %260
  %262 = xor i32 -1, -1
  %263 = and i32 %262, 331803271
  %264 = xor i32 331803271, -1
  %265 = and i32 -1, %264
  %266 = or i32 %263, %265
  %267 = xor i32 -1, -1
  %268 = and i32 %267, 331803271
  %269 = xor i32 331803271, -1
  %270 = and i32 -1, %269
  %271 = or i32 %268, %270
  %272 = xor i32 %266, %271
  %273 = xor i32 1088928256, -1
  %274 = xor i32 %272, %273
  %275 = and i32 %274, %272
  %276 = xor i32 1088928256, -1
  %277 = and i32 %276, 387748802
  %278 = xor i32 387748802, -1
  %279 = and i32 1088928256, %278
  %280 = or i32 %277, %279
  %281 = xor i32 -1, -1
  %282 = and i32 %281, 387748802
  %283 = xor i32 387748802, -1
  %284 = and i32 -1, %283
  %285 = or i32 %282, %284
  %286 = xor i32 %280, %285
  %287 = xor i32 %286, -1
  %288 = xor i32 -1, %287
  %289 = and i32 %288, -1
  %290 = xor i32 %275, -1
  %291 = xor i32 %289, -1
  %292 = and i32 %290, %291
  %293 = xor i32 %292, -1
  %294 = xor i32 155177993, -1
  %295 = or i32 155177993, %294
  %296 = and i32 %293, %295
  %297 = xor i32 %261, -1
  %298 = and i32 %297, 774702931
  %299 = xor i32 774702931, -1
  %300 = and i32 %261, %299
  %301 = or i32 %298, %300
  %302 = xor i32 %296, -1
  %303 = and i32 %302, 774702931
  %304 = xor i32 774702931, -1
  %305 = and i32 %296, %304
  %306 = or i32 %303, %305
  %307 = xor i32 %301, %306
  %308 = xor i32 1615933409, -1
  %309 = and i32 %308, 114705909
  %310 = xor i32 114705909, -1
  %311 = and i32 1615933409, %310
  %312 = or i32 %309, %311
  %313 = xor i32 -1, -1
  %314 = and i32 %313, 114705909
  %315 = xor i32 114705909, -1
  %316 = and i32 -1, %315
  %317 = or i32 %314, %316
  %318 = xor i32 %312, %317
  %319 = xor i32 %307, -1
  %320 = and i32 %319, 1928289896
  %321 = xor i32 1928289896, -1
  %322 = and i32 %307, %321
  %323 = or i32 %320, %322
  %324 = xor i32 %318, -1
  %325 = and i32 %324, 1928289896
  %326 = xor i32 1928289896, -1
  %327 = and i32 %318, %326
  %328 = or i32 %325, %327
  %329 = xor i32 %323, %328
  %330 = xor i32 %307, -1
  %331 = xor i32 %329, %330
  %332 = and i32 %331, %329
  %333 = xor i32 1615933409, -1
  %334 = and i32 %333, 387690054
  %335 = xor i32 387690054, -1
  %336 = and i32 1615933409, %335
  %337 = or i32 %334, %336
  %338 = xor i32 -1, -1
  %339 = and i32 %338, 387690054
  %340 = xor i32 387690054, -1
  %341 = and i32 -1, %340
  %342 = or i32 %339, %341
  %343 = xor i32 %337, %342
  %344 = xor i32 -1, -1
  %345 = xor i32 %343, %344
  %346 = and i32 %345, %343
  %347 = xor i32 -1, -1
  %348 = and i32 %347, 1677766720
  %349 = xor i32 1677766720, -1
  %350 = and i32 -1, %349
  %351 = or i32 %348, %350
  %352 = xor i32 -1, -1
  %353 = and i32 %352, 1677766720
  %354 = xor i32 1677766720, -1
  %355 = and i32 -1, %354
  %356 = or i32 %353, %355
  %357 = xor i32 %351, %356
  %358 = xor i32 %357, -1
  %359 = xor i32 1615933409, %358
  %360 = and i32 %359, 1615933409
  %361 = and i32 %346, %360
  %362 = xor i32 %346, %360
  %363 = or i32 %361, %362
  %364 = xor i32 %67, -1
  %365 = and i32 %364, 226645851
  %366 = xor i32 226645851, -1
  %367 = and i32 %67, %366
  %368 = or i32 %365, %367
  %369 = xor i32 -1, -1
  %370 = and i32 %369, 226645851
  %371 = xor i32 226645851, -1
  %372 = and i32 -1, %371
  %373 = or i32 %370, %372
  %374 = xor i32 %368, %373
  %375 = xor i32 %363, -1
  %376 = and i32 %375, -1
  %377 = xor i32 -1, -1
  %378 = and i32 %363, %377
  %379 = or i32 %376, %378
  %380 = and i32 %374, %379
  %381 = xor i32 %374, %379
  %382 = or i32 %380, %381
  %383 = xor i32 %382, -1
  %384 = and i32 %383, -1
  %385 = xor i32 -1, -1
  %386 = and i32 %382, %385
  %387 = or i32 %384, %386
  %388 = xor i32 1319573002, -1
  %389 = and i32 %388, -1
  %390 = xor i32 -1, -1
  %391 = and i32 1319573002, %390
  %392 = or i32 %389, %391
  %393 = xor i32 1319573002, -1
  %394 = xor i32 %392, -1
  %395 = and i32 %393, %394
  %396 = xor i32 %395, -1
  %397 = xor i32 1576354471, -1
  %398 = or i32 1576354471, %397
  %399 = and i32 %396, %398
  %400 = xor i32 %387, -1
  %401 = xor i32 %399, -1
  %402 = or i32 %400, %401
  %403 = xor i32 %402, -1
  %404 = xor i32 1449922716, -1
  %405 = or i32 1449922716, %404
  %406 = and i32 %403, %405
  %407 = xor i32 %406, -1
  %408 = xor i32 %332, %407
  %409 = and i32 %408, %332
  %410 = xor i32 %332, -1
  %411 = and i32 %410, 235358739
  %412 = xor i32 235358739, -1
  %413 = and i32 %332, %412
  %414 = or i32 %411, %413
  %415 = xor i32 %406, -1
  %416 = and i32 %415, 235358739
  %417 = xor i32 235358739, -1
  %418 = and i32 %406, %417
  %419 = or i32 %416, %418
  %420 = xor i32 %414, %419
  %421 = and i32 %409, %420
  %422 = xor i32 %409, %420
  %423 = or i32 %421, %422
  %424 = xor i32 %228, -1
  %425 = and i32 %424, 739260176
  %426 = xor i32 739260176, -1
  %427 = and i32 %228, %426
  %428 = or i32 %425, %427
  %429 = xor i32 -1, -1
  %430 = and i32 %429, 739260176
  %431 = xor i32 739260176, -1
  %432 = and i32 -1, %431
  %433 = or i32 %430, %432
  %434 = xor i32 %428, %433
  %435 = xor i32 %423, -1
  %436 = xor i32 %434, %435
  %437 = and i32 %436, %434
  %438 = xor i32 %423, -1
  %439 = and i32 %438, 1513963107
  %440 = xor i32 1513963107, -1
  %441 = and i32 %423, %440
  %442 = or i32 %439, %441
  %443 = xor i32 -1, -1
  %444 = and i32 %443, 1513963107
  %445 = xor i32 1513963107, -1
  %446 = and i32 -1, %445
  %447 = or i32 %444, %446
  %448 = xor i32 %442, %447
  %449 = xor i32 %228, -1
  %450 = xor i32 %448, -1
  %451 = or i32 %449, %450
  %452 = xor i32 %451, -1
  %453 = xor i32 1114967934, -1
  %454 = or i32 1114967934, %453
  %455 = and i32 %452, %454
  %456 = and i32 %437, %455
  %457 = xor i32 %437, %455
  %458 = or i32 %456, %457
  %459 = trunc i32 %458 to i8
  %460 = load i8*, i8** %3, align 8
  %461 = load i32, i32* %6, align 4
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i8, i8* %460, i64 %462
  store i8 %459, i8* %463, align 1
  br label %464

464:                                              ; preds = %14
  %465 = load i32, i32* %6, align 4
  %466 = sub i32 0, 862338634
  %467 = sub i32 %466, 1792466076
  %468 = add i32 %467, 862338634
  %469 = sub i32 %468, 684230066
  %470 = sub i32 %469, 1
  %471 = add i32 %470, 684230066
  %472 = add i32 %471, 936115388
  %473 = add i32 %472, 1792466076
  %474 = sub i32 %473, 936115388
  %475 = add i32 %465, 1803829822
  %476 = add i32 %475, 1515410663
  %477 = sub i32 %476, 1803829822
  %478 = sub i32 0, %474
  %479 = add i32 %477, %478
  %480 = add i32 %479, 2030475674
  %481 = sub i32 %480, 1515410663
  %482 = sub i32 %481, 2030475674
  store i32 %482, i32* %6, align 4
  br label %10, !llvm.loop !2

483:                                              ; preds = %10
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @strlen(i8*) #1

; Function Attrs: noinline norecurse optnone uwtable mustprogress
define dso_local i32 @main(i32 %0, i8** %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [100 x i8], align 16
  %7 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %9 = load i32, i32* %4, align 4
  %10 = icmp sle i32 %9, 1
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %529

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  store i8* %16, i8** @input, align 8
  %17 = load i8*, i8** @input, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8* %17)
  %19 = bitcast [100 x i8]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 100, i1 false)
  %20 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i64 0, i64 0
  %21 = load i8*, i8** @input, align 8
  call void @_Z7encryptPhPc(i8* %20, i8* %21)
  %22 = load i8*, i8** @input, align 8
  %23 = call i64 @strlen(i8* %22) #5
  %24 = icmp eq i64 %23, 22
  br i1 %24, label %25, label %520

25:                                               ; preds = %13
  %26 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i64 0, i64 0
  %27 = call i32 @memcmp(i8* %26, i8* getelementptr inbounds ([100 x i8], [100 x i8]* bitcast (<{ [22 x i8], [78 x i8] }>* @enc to [100 x i8]*), i64 0, i64 0), i64 22) #5
  %28 = icmp ne i32 %27, 0
  %29 = xor i1 %28, true
  %30 = and i1 %29, true
  %31 = xor i1 true, true
  %32 = and i1 %28, %31
  %33 = or i1 %30, %32
  %34 = xor i1 true, true
  %35 = and i1 %34, true
  %36 = xor i1 true, true
  %37 = and i1 true, %36
  %38 = or i1 %35, %37
  %39 = xor i1 %33, %38
  %40 = xor i1 %39, true
  %41 = xor i1 true, true
  %42 = or i1 %40, %41
  %43 = xor i1 %42, true
  %44 = xor i1 true, true
  %45 = or i1 true, %44
  %46 = and i1 %43, %45
  %47 = xor i1 true, true
  %48 = and i1 %47, false
  %49 = xor i1 false, true
  %50 = and i1 true, %49
  %51 = or i1 %48, %50
  %52 = xor i1 true, true
  %53 = and i1 %52, false
  %54 = xor i1 false, true
  %55 = and i1 true, %54
  %56 = or i1 %53, %55
  %57 = xor i1 %51, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %28, %58
  %60 = and i1 %59, %28
  %61 = and i1 %46, %60
  %62 = xor i1 %46, %60
  %63 = or i1 %61, %62
  %64 = xor i1 false, true
  %65 = and i1 %64, true
  %66 = xor i1 true, true
  %67 = and i1 false, %66
  %68 = or i1 %65, %67
  %69 = xor i1 true, true
  %70 = and i1 %69, true
  %71 = xor i1 true, true
  %72 = and i1 true, %71
  %73 = or i1 %70, %72
  %74 = xor i1 %68, %73
  %75 = xor i1 %63, true
  %76 = and i1 %75, %74
  %77 = xor i1 %74, true
  %78 = and i1 %63, %77
  %79 = or i1 %76, %78
  %80 = xor i1 %63, true
  %81 = xor i1 %79, %80
  %82 = and i1 %81, %79
  %83 = xor i1 false, true
  %84 = and i1 %83, false
  %85 = xor i1 false, true
  %86 = and i1 false, %85
  %87 = or i1 %84, %86
  %88 = xor i1 true, true
  %89 = and i1 %88, false
  %90 = xor i1 false, true
  %91 = and i1 true, %90
  %92 = or i1 %89, %91
  %93 = xor i1 %87, %92
  %94 = xor i1 true, true
  %95 = xor i1 %93, %94
  %96 = and i1 %95, %93
  %97 = xor i1 true, true
  %98 = and i1 %97, true
  %99 = xor i1 true, true
  %100 = and i1 true, %99
  %101 = or i1 %98, %100
  %102 = xor i1 true, true
  %103 = and i1 %102, true
  %104 = xor i1 true, true
  %105 = and i1 true, %104
  %106 = or i1 %103, %105
  %107 = xor i1 %101, %106
  %108 = xor i1 false, true
  %109 = xor i1 %107, true
  %110 = or i1 %108, %109
  %111 = xor i1 %110, true
  %112 = xor i1 true, true
  %113 = or i1 true, %112
  %114 = and i1 %111, %113
  %115 = and i1 %96, %114
  %116 = xor i1 %96, %114
  %117 = or i1 %115, %116
  %118 = xor i1 true, true
  %119 = and i1 %118, false
  %120 = xor i1 false, true
  %121 = and i1 true, %120
  %122 = or i1 %119, %121
  %123 = xor i1 true, true
  %124 = and i1 %123, false
  %125 = xor i1 false, true
  %126 = and i1 true, %125
  %127 = or i1 %124, %126
  %128 = xor i1 %122, %127
  %129 = xor i1 %128, true
  %130 = xor i1 true, true
  %131 = or i1 %129, %130
  %132 = xor i1 %131, true
  %133 = xor i1 true, true
  %134 = or i1 true, %133
  %135 = and i1 %132, %134
  %136 = xor i1 true, true
  %137 = and i1 %136, true
  %138 = xor i1 true, true
  %139 = and i1 true, %138
  %140 = or i1 %137, %139
  %141 = xor i1 true, true
  %142 = xor i1 %140, true
  %143 = or i1 %141, %142
  %144 = xor i1 %143, true
  %145 = xor i1 true, true
  %146 = or i1 true, %145
  %147 = and i1 %144, %146
  %148 = and i1 %135, %147
  %149 = xor i1 %135, %147
  %150 = or i1 %148, %149
  %151 = xor i1 %117, true
  %152 = and i1 %151, %150
  %153 = xor i1 %150, true
  %154 = and i1 %117, %153
  %155 = or i1 %152, %154
  %156 = xor i1 %28, true
  %157 = and i1 %156, true
  %158 = xor i1 true, true
  %159 = and i1 %28, %158
  %160 = or i1 %157, %159
  %161 = xor i1 %155, true
  %162 = and i1 %161, true
  %163 = xor i1 true, true
  %164 = and i1 %155, %163
  %165 = or i1 %162, %164
  %166 = xor i1 %160, true
  %167 = xor i1 %165, true
  %168 = and i1 %166, %167
  %169 = xor i1 %168, true
  %170 = xor i1 true, true
  %171 = or i1 true, %170
  %172 = and i1 %169, %171
  %173 = xor i1 %172, true
  %174 = and i1 %173, false
  %175 = xor i1 false, true
  %176 = and i1 %172, %175
  %177 = or i1 %174, %176
  %178 = xor i1 true, true
  %179 = and i1 %178, false
  %180 = xor i1 false, true
  %181 = and i1 true, %180
  %182 = or i1 %179, %181
  %183 = xor i1 %177, %182
  %184 = xor i1 false, true
  %185 = and i1 %184, true
  %186 = xor i1 true, true
  %187 = and i1 false, %186
  %188 = or i1 %185, %187
  %189 = xor i1 false, true
  %190 = xor i1 %188, true
  %191 = and i1 %189, %190
  %192 = xor i1 %191, true
  %193 = xor i1 false, true
  %194 = or i1 false, %193
  %195 = and i1 %192, %194
  %196 = xor i1 %195, true
  %197 = xor i1 %183, %196
  %198 = and i1 %197, %183
  %199 = xor i1 %82, true
  %200 = and i1 %199, true
  %201 = xor i1 true, true
  %202 = and i1 %82, %201
  %203 = or i1 %200, %202
  %204 = xor i1 %198, true
  %205 = and i1 %204, true
  %206 = xor i1 true, true
  %207 = and i1 %198, %206
  %208 = or i1 %205, %207
  %209 = xor i1 %208, true
  %210 = xor i1 %203, %209
  %211 = and i1 %210, %203
  %212 = xor i1 %211, true
  %213 = and i1 %212, true
  %214 = xor i1 true, true
  %215 = and i1 %211, %214
  %216 = or i1 %213, %215
  %217 = xor i1 true, true
  %218 = and i1 %217, true
  %219 = xor i1 true, true
  %220 = and i1 true, %219
  %221 = or i1 %218, %220
  %222 = xor i1 %216, %221
  %223 = xor i1 false, true
  %224 = and i1 %223, true
  %225 = xor i1 true, true
  %226 = and i1 false, %225
  %227 = or i1 %224, %226
  %228 = xor i1 false, true
  %229 = xor i1 %227, true
  %230 = and i1 %228, %229
  %231 = xor i1 %230, true
  %232 = xor i1 false, true
  %233 = or i1 false, %232
  %234 = and i1 %231, %233
  %235 = xor i1 %222, true
  %236 = xor i1 %234, true
  %237 = or i1 %235, %236
  %238 = xor i1 %237, true
  %239 = xor i1 true, true
  %240 = or i1 true, %239
  %241 = and i1 %238, %240
  %242 = xor i1 true, true
  %243 = and i1 %242, true
  %244 = xor i1 true, true
  %245 = and i1 true, %244
  %246 = or i1 %243, %245
  %247 = xor i1 true, true
  %248 = and i1 %247, true
  %249 = xor i1 true, true
  %250 = and i1 true, %249
  %251 = or i1 %248, %250
  %252 = xor i1 %246, %251
  %253 = xor i1 true, true
  %254 = xor i1 %252, %253
  %255 = and i1 %254, %252
  %256 = xor i1 true, true
  %257 = and i1 %256, true
  %258 = xor i1 true, true
  %259 = and i1 true, %258
  %260 = or i1 %257, %259
  %261 = xor i1 true, true
  %262 = xor i1 %260, true
  %263 = or i1 %261, %262
  %264 = xor i1 %263, true
  %265 = xor i1 true, true
  %266 = or i1 true, %265
  %267 = and i1 %264, %266
  %268 = and i1 %255, %267
  %269 = xor i1 %255, %267
  %270 = or i1 %268, %269
  %271 = xor i1 true, true
  %272 = and i1 %271, true
  %273 = xor i1 true, true
  %274 = and i1 true, %273
  %275 = or i1 %272, %274
  %276 = xor i1 %275, true
  %277 = xor i1 true, true
  %278 = or i1 %276, %277
  %279 = xor i1 %278, true
  %280 = xor i1 false, true
  %281 = or i1 false, %280
  %282 = and i1 %279, %281
  %283 = xor i1 true, true
  %284 = and i1 %283, true
  %285 = xor i1 true, true
  %286 = and i1 true, %285
  %287 = or i1 %284, %286
  %288 = xor i1 true, true
  %289 = xor i1 %287, true
  %290 = or i1 %288, %289
  %291 = xor i1 %290, true
  %292 = xor i1 false, true
  %293 = or i1 false, %292
  %294 = and i1 %291, %293
  %295 = xor i1 %282, true
  %296 = xor i1 %294, true
  %297 = and i1 %295, %296
  %298 = xor i1 %297, true
  %299 = xor i1 false, true
  %300 = or i1 false, %299
  %301 = and i1 %298, %300
  %302 = xor i1 %270, true
  %303 = and i1 %302, %301
  %304 = xor i1 %301, true
  %305 = and i1 %270, %304
  %306 = or i1 %303, %305
  %307 = xor i1 %306, true
  %308 = and i1 %307, false
  %309 = xor i1 false, true
  %310 = and i1 %306, %309
  %311 = or i1 %308, %310
  %312 = xor i1 true, true
  %313 = and i1 %312, false
  %314 = xor i1 false, true
  %315 = and i1 true, %314
  %316 = or i1 %313, %315
  %317 = xor i1 %311, %316
  %318 = xor i1 false, true
  %319 = and i1 %318, false
  %320 = xor i1 false, true
  %321 = and i1 false, %320
  %322 = or i1 %319, %321
  %323 = xor i1 true, true
  %324 = and i1 %323, false
  %325 = xor i1 false, true
  %326 = and i1 true, %325
  %327 = or i1 %324, %326
  %328 = xor i1 %322, %327
  %329 = xor i1 %317, true
  %330 = xor i1 %328, true
  %331 = and i1 %329, %330
  %332 = xor i1 %331, true
  %333 = xor i1 false, true
  %334 = or i1 false, %333
  %335 = and i1 %332, %334
  %336 = xor i1 %335, true
  %337 = and i1 %336, true
  %338 = xor i1 true, true
  %339 = and i1 %335, %338
  %340 = or i1 %337, %339
  %341 = xor i1 false, true
  %342 = and i1 %341, true
  %343 = xor i1 true, true
  %344 = and i1 false, %343
  %345 = or i1 %342, %344
  %346 = xor i1 true, true
  %347 = and i1 %346, true
  %348 = xor i1 true, true
  %349 = and i1 true, %348
  %350 = or i1 %347, %349
  %351 = xor i1 %345, %350
  %352 = xor i1 false, true
  %353 = xor i1 %351, true
  %354 = and i1 %352, %353
  %355 = xor i1 %354, true
  %356 = xor i1 false, true
  %357 = or i1 false, %356
  %358 = and i1 %355, %357
  %359 = xor i1 %358, true
  %360 = xor i1 %340, %359
  %361 = and i1 %360, %340
  %362 = xor i1 false, true
  %363 = and i1 %362, true
  %364 = xor i1 true, true
  %365 = and i1 false, %364
  %366 = or i1 %363, %365
  %367 = xor i1 %366, true
  %368 = xor i1 false, true
  %369 = or i1 %367, %368
  %370 = xor i1 %369, true
  %371 = xor i1 true, true
  %372 = or i1 true, %371
  %373 = and i1 %370, %372
  %374 = xor i1 false, true
  %375 = and i1 %374, true
  %376 = xor i1 true, true
  %377 = and i1 false, %376
  %378 = or i1 %375, %377
  %379 = xor i1 true, true
  %380 = and i1 %379, true
  %381 = xor i1 true, true
  %382 = and i1 true, %381
  %383 = or i1 %380, %382
  %384 = xor i1 %378, %383
  %385 = xor i1 %384, true
  %386 = xor i1 false, %385
  %387 = and i1 %386, false
  %388 = xor i1 %373, true
  %389 = xor i1 %387, true
  %390 = and i1 %388, %389
  %391 = xor i1 %390, true
  %392 = xor i1 false, true
  %393 = or i1 false, %392
  %394 = and i1 %391, %393
  %395 = xor i1 true, true
  %396 = and i1 %395, false
  %397 = xor i1 false, true
  %398 = and i1 true, %397
  %399 = or i1 %396, %398
  %400 = xor i1 true, true
  %401 = and i1 %400, false
  %402 = xor i1 false, true
  %403 = and i1 true, %402
  %404 = or i1 %401, %403
  %405 = xor i1 %399, %404
  %406 = xor i1 false, true
  %407 = xor i1 %405, %406
  %408 = and i1 %407, %405
  %409 = xor i1 false, true
  %410 = and i1 %409, true
  %411 = xor i1 true, true
  %412 = and i1 false, %411
  %413 = or i1 %410, %412
  %414 = xor i1 %413, true
  %415 = xor i1 true, %414
  %416 = and i1 %415, true
  %417 = and i1 %408, %416
  %418 = xor i1 %408, %416
  %419 = or i1 %417, %418
  %420 = xor i1 %394, true
  %421 = and i1 %420, true
  %422 = xor i1 true, true
  %423 = and i1 %394, %422
  %424 = or i1 %421, %423
  %425 = xor i1 %419, true
  %426 = and i1 %425, true
  %427 = xor i1 true, true
  %428 = and i1 %419, %427
  %429 = or i1 %426, %428
  %430 = xor i1 %424, %429
  %431 = xor i1 true, true
  %432 = and i1 %431, true
  %433 = xor i1 true, true
  %434 = and i1 true, %433
  %435 = or i1 %432, %434
  %436 = xor i1 true, true
  %437 = and i1 %436, true
  %438 = xor i1 true, true
  %439 = and i1 true, %438
  %440 = or i1 %437, %439
  %441 = xor i1 %435, %440
  %442 = xor i1 %430, true
  %443 = and i1 %442, false
  %444 = xor i1 false, true
  %445 = and i1 %430, %444
  %446 = or i1 %443, %445
  %447 = xor i1 true, true
  %448 = and i1 %447, false
  %449 = xor i1 false, true
  %450 = and i1 true, %449
  %451 = or i1 %448, %450
  %452 = xor i1 %446, %451
  %453 = and i1 %441, %452
  %454 = xor i1 %441, %452
  %455 = or i1 %453, %454
  %456 = xor i1 %455, true
  %457 = and i1 %456, true
  %458 = xor i1 true, true
  %459 = and i1 %455, %458
  %460 = or i1 %457, %459
  %461 = xor i1 true, true
  %462 = and i1 %461, true
  %463 = xor i1 true, true
  %464 = and i1 true, %463
  %465 = or i1 %462, %464
  %466 = xor i1 true, true
  %467 = xor i1 %465, true
  %468 = and i1 %466, %467
  %469 = xor i1 %468, true
  %470 = xor i1 false, true
  %471 = or i1 false, %470
  %472 = and i1 %469, %471
  %473 = xor i1 %472, true
  %474 = xor i1 %460, %473
  %475 = and i1 %474, %460
  %476 = xor i1 %475, true
  %477 = xor i1 %361, %476
  %478 = and i1 %477, %361
  %479 = xor i1 %361, true
  %480 = and i1 %479, false
  %481 = xor i1 false, true
  %482 = and i1 %361, %481
  %483 = or i1 %480, %482
  %484 = xor i1 %475, true
  %485 = and i1 %484, false
  %486 = xor i1 false, true
  %487 = and i1 %475, %486
  %488 = or i1 %485, %487
  %489 = xor i1 %483, %488
  %490 = and i1 %478, %489
  %491 = xor i1 %478, %489
  %492 = or i1 %490, %491
  %493 = xor i1 %241, true
  %494 = and i1 %493, true
  %495 = xor i1 true, true
  %496 = and i1 %241, %495
  %497 = or i1 %494, %496
  %498 = xor i1 %492, true
  %499 = xor i1 %497, %498
  %500 = and i1 %499, %497
  %501 = xor i1 %492, true
  %502 = and i1 %501, true
  %503 = xor i1 true, true
  %504 = and i1 %492, %503
  %505 = or i1 %502, %504
  %506 = xor i1 %241, true
  %507 = xor i1 %505, true
  %508 = or i1 %506, %507
  %509 = xor i1 %508, true
  %510 = xor i1 true, true
  %511 = or i1 true, %510
  %512 = and i1 %509, %511
  %513 = xor i1 %500, true
  %514 = xor i1 %512, true
  %515 = and i1 %513, %514
  %516 = xor i1 %515, true
  %517 = xor i1 true, true
  %518 = or i1 true, %517
  %519 = and i1 %516, %518
  br label %520

520:                                              ; preds = %25, %13
  %521 = phi i1 [ false, %13 ], [ %519, %25 ]
  %522 = zext i1 %521 to i8
  store i8 %522, i8* %7, align 1
  %523 = load i8, i8* %7, align 1
  %524 = trunc i8 %523 to i1
  br i1 %524, label %525, label %527

525:                                              ; preds = %520
  %526 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  br label %529

527:                                              ; preds = %520
  %528 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  br label %529

529:                                              ; preds = %527, %525, %11
  %530 = load i32, i32* %3, align 4
  ret i32 %530
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @memcmp(i8*, i8*, i64) #1

attributes #0 = { noinline nounwind optnone uwtable mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse optnone uwtable mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #5 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.1"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
